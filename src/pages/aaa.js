class DataCalculateStrategyE {
    constructor() {
        this.FREQUENCY = 80_000_000; // 80MHz
        this.LIMIT_DATA = 100_000_000;
        this.COEFFICIENT = 0.035;
        this.SLOPE_ZOOM = 7;
        this.A = -50.719;
        this.B = 1.823;
    }
    
    analyze(data, inhaleCoefficient, exhaleCoefficient) {
        const useData = this.insertZeroBetweenInversionData(this.convertAll(data));
        const result = [];

        let calibratedLps = 0;

        result.push(new FluidMetrics(0, 0, 0));
        for (let i = 1; i < useData.length; i++) {
            const previous = useData[i - 1];
            const current = useData[i];
            const time = this.getTime(current);
            const lps = this.getCalibratedLPS(
                calibratedLps,
                previous,
                current,
                inhaleCoefficient,
                exhaleCoefficient
            );
            calibratedLps = lps;
            const volume = this.getVolume(lps, time);

            const metrics = new FluidMetrics(time, lps, volume);
            metrics.exhale = this.isExhale(current);

            result.push(metrics);
        }

        return result;
    }

    getStrategy() {
        return 'E';
    }

    //완료
    getTime(value) {
        const body = this.getBody(value);
        const time = body * (1 / this.FREQUENCY);

        if (time === 0) return 0;
        return time;
    }

    insertZeroBetweenInversionData(data) {
        const result = [];

        result.push(0);
        data.unshift(0);
        for (let i = 1; i < data.length; i++) {
            const current = data[i];
            let inversion = true;

            if (this.getBody(current) !== 0) {
                for (let j = i - 1; j >= 0; j--) {
                    const past = data[j];

                    if (this.isExhale(past) !== this.isExhale(current)) {
                        break;
                    }

                    if (this.getBody(past) !== 0) {
                        inversion = false;
                        break;
                    }
                }
            }

            if (inversion) {
                result.push(this.getZero(this.isExhale(current)));
            } else {
                result.push(current);
            }
        }

        return result;
    }

    getCalibratedLPS(
        calibratedPreLps,
        previous,
        current,
        inhale,
        exhale
    ) {
        const time = this.getTime(current);
        if (time === 0) return 0;

        const previousLps = this.getLps(previous, inhale, exhale);
        const currentLps = this.getLps(current, inhale, exhale);
        let calibratedLps = 0;

        const slope = (currentLps - previousLps) / time;
        if (slope >= 0) {
            calibratedLps = currentLps;
        } else {
            if (Math.abs(calibratedPreLps) === 0) return 0;
            const predSlope = this.A * Math.pow(currentLps, this.B);
            calibratedLps = currentLps - (currentLps * ((slope / predSlope) * this.SLOPE_ZOOM));
            if (calibratedLps < 0) return 0;
        }
        console.log("aaaa")
        console.log(calibratedLps)
        if (!this.isExhale(current)) return -calibratedLps;
        else return calibratedLps;
    }

    getZero(isExhale) {
        if (isExhale) return 0;
        else return this.LIMIT_DATA;
    }

    getLps(data, inhaleGain, exhaleGain) {

        const time = this.getTime(data);
        if (time === 0) return 0;
        const rps = 1 / time;

        const isExhale = this.isExhale(data);

        if (isExhale) return (rps * this.COEFFICIENT) * exhaleGain;
        else return (rps * this.COEFFICIENT) * inhaleGain;
    }

    getVolume(lps, time) {
        return Math.abs(lps) * time;
    }

    isExhale(data) {
        const head = Math.floor(data / this.LIMIT_DATA);
        return head === 1;
    }

    convert(data) {
        if (data.length === 10) return parseInt(data.substring(0, 9));
        else if (data.length === 9) return parseInt(data);
        else return 0;
    }

    convertAll(allData) {
        const data = allData.split(" ");
        const result = [];

        for (let i = 0; i < data.length; i++) {
            const value = this.convert(data[i]);
            result.push(value);
        }

        return result;
    }

    getHead(data) {
        return Math.floor(data / this.LIMIT_DATA);
    }

    getBody(data) {
        return data % this.LIMIT_DATA;
    }
}

  class FluidMetrics {
    constructor(time, lps, volume) {
        this.time = time;
        this.lps = lps;
        this.volume = volume;
        this.exhale = false;
    }

    setExhale(value) {
        this.exhale = value;
    }
  }

  
  const dataCalculateStrategyE = new DataCalculateStrategyE();

  const data여기에 분석할 데이터를 넣으세요
  const inhaleCoefficient = 0; // 흡기 계수
  const exhaleCoefficient = 0; // 호기 계수

  const result = dataCalculateStrategyE.analyze(data, inhaleCoefficient, exhaleCoefficient);

  console.log(result);
